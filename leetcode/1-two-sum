#include "helper.h"

using namespace std;

vector<int> twoSum_brute_force(vector<int> &nums, int target)
{
  clock_t begin_time = clock();
  int n = nums.size();

  for (int i = 0; i < n; i++)
  {
    /* for each element nums[i], go through the whole array
       again to see if there is an element target - nums[i] at
       an index other than i
    */
    for (int j = 0; j < n; j++)
    {
      if (i != j && nums[i] + nums[j] == target)
      {
        // found the pair
        return {i, j};
      }
    }
  }

  std::cout << float(clock() - begin_time) / CLOCKS_PER_SEC;
  return {};
}

template <typename T>
pair<bool, int> binary_search(vector<T> &a, T target, int left_idx, int right_idx)
{
  // printf("target is: %d\n", target);
  while (left_idx < right_idx)
  {
    int idx = left_idx + ((right_idx - left_idx) / 2);
    // printf("binary search... (%d, %d) -> a[%d] == %d\n", left_idx, right_idx, idx, a[idx]);
    if (a[idx] == target)
    {
      return make_pair(true, idx);
    }
    else if (a[idx] > target)
    {
      right_idx = idx - 1;
    }
    else if (a[idx] < target)
    {
      left_idx = idx + 1;
    }
  }

  return make_pair(false, -1);
}

vector<int> twoSum_binary_search(vector<int> &nums, int target)
{
  int n = nums.size();
  sort(nums.begin(), nums.end());

  for (int idx = 0; idx < n; idx++)
  {
    auto out = binary_search(nums, target - nums[idx], idx, n - 1);
    if (out.first == true)
    {
      return {idx, out.second};
    }
  }
  return {};
}

vector<int> twoSum_two_pointers(vector<int> &nums, int target)
{
  int n = nums.size();
  sort(nums.begin(), nums.end());
  int i = 0;
  int j = n - 1;
  vector<int> out(2);

  while (i < j)
  {
    int curr = nums[i] + nums[j];
    if (curr == target)
    {
      out[0] = i;
      out[1] = j;
      break;
    }
    else if (curr < target)
    {
      i++;
    }
    else if (curr > target)
    {
      j--;
    }
  }

  return out;
}

vector<int> twoSum_unordered_map(vector<int> &nums, int target)
{
  unordered_map<int, int> m;
  for (int i = 0; i < nums.size(); i++)
  {
    // check if target-num[i] is in the map
    if (m.count(target - nums[i]))
    {
      return {i, m[target - nums[i]]};
    }
    // update the map with current element
    m[nums[i]] = i;
  }

  return {};
}

int main()
{
  int size = 100000;
  vector<int> input(size);
  generate(input.begin(), input.end(), RandomNumberBetween(0, 1000000));
  int i = rand() % size;
  int j = rand() % size;
  sort(input.begin(), input.end());

  long target = input[i] + input[j];

  clock_t begin_time = clock();
  auto res = twoSum_brute_force(input, target);
  std::cout << "Brute force approach: " << float(clock() - begin_time) / CLOCKS_PER_SEC << "\n";
  printf("nums[%d] + nums[%d] / %d + %d = %d\n", res[0], res[1], input[res[0]], input[res[1]], target);

  begin_time = clock();
  res = twoSum_binary_search(input, target);
  std::cout << "Binary search approach: " << float(clock() - begin_time) / CLOCKS_PER_SEC << "\n";
  printf("nums[%d] + nums[%d] / %d + %d = %d\n", res[0], res[1], input[res[0]], input[res[1]], target);

  begin_time = clock();
  res = twoSum_two_pointers(input, target);
  std::cout << "Two pointers approach: " << float(clock() - begin_time) / CLOCKS_PER_SEC << "\n";
  printf("nums[%d] + nums[%d] / %d + %d = %d\n", res[0], res[1], input[res[0]], input[res[1]], target);

  begin_time = clock();
  res = twoSum_unordered_map(input, target);
  std::cout << "Unodered map approach: " << float(clock() - begin_time) / CLOCKS_PER_SEC << "\n";
  printf("nums[%d] + nums[%d] / %d + %d = %d\n", res[0], res[1], input[res[0]], input[res[1]], target);

  return 0;
}