#include "helper.h"

/* Great reference:
https://leetcode.com/problems/add-two-numbers/discuss/1340/A-summary-about-how-to-solve-Linked-List-problem-C%2B%2B
*/

using namespace std;

struct ListNode
{
  int val;
  ListNode *next;
  ListNode() : val(0), next(nullptr) {}
  ListNode(int x) : val(x), next(nullptr) {}
  ListNode(int x, ListNode *next) : val(x), next(next) {}
};

ListNode *addTwoNumbers(ListNode *l1, ListNode *l2)
{
  int extra = 0;
  ListNode newHead(0);
  ListNode *t = &newHead;
  while (sum || l1 || l2)
  {
    int sum = (l1 ? l1->val : 0) + (l2 ? l2->val : 0);
    extra = sum / 10;
    t->next = new ListNode(sum % 10);
    t = t->next;
    if (l1)
      l1 = l1->next;
    if (l2)
      l2 = l2->next;
  }
  return newHead.next;
}

int main()
{
  vector<int> input_1{2, 4, 3, 9};
  vector<int> input_2{5, 6, 4, 9};

  ListNode *list_node_1 = new ListNode();
  for (int i = input_1.size() - 1; i >= 0; i--)
  {
    list_node_1 = new ListNode(input_1[i], list_node_1);
  }

  ListNode *list_node_2 = new ListNode();
  for (int i = input_2.size() - 1; i >= 0; i--)
  {
    list_node_2 = new ListNode(input_2[i], list_node_2);
  }

  auto res = addTwoNumbers(list_node_1, list_node_2);

  while (res)
  {
    std::cout << res->val;
    res = res->next;
  };
  std::cout << std::endl;

  return 0;
}
